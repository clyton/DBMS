1. Basic information
Team number (e.g., 01) : 
#1 Student ID : 
#1 Student Name : 
#2 Student ID : 
#2 Student Name : 
OS (bit) :
gcc version :


2. Catalog information about Index
- Show your catalog information about an index (tables, columns). 


3. Block Nested Loop Join (If you have implemented this feature)
- Describe how your block nested loop join works (especially, how you manage the given buffers.)
* steps
  1. leftMemBuf <- load the left table pages in memory using leftIn if rightIn has reached EOF
  2. If leftIn has reached end of file then return 
  3. rRec <- read next tuple from right table if cursor of leftMemBuf has reached end of buffer
  4. lRec <- cursor of leftMemBuf
  5. join lRec with rRec 
  6. if lRec join rRec satisfies condition
     1. jLR <- join lRec rRec
     2. advance cursor of leftMemBuf
     3. if on advancing cursor is invalid, read rRec <- read next tuple from rightIn
     4. set cursor of leftMemBuf to 0
     5. return success
  7. 


4. Index Nested Loop Join (If you have implemented this feature)
- Describe how your grace hash join works.


5. Grace Hash Join (If you have implemented this feature)
- Describe how your grace hash join works (especially, in-memory structure).


6. Aggregation
- Describe how your aggregation (basic, group-based hash) works.


7. Implementation Detail
- Have you added your own source file (.cc or .h)?

- Have you implemented any optional features? Then, describe them here.

- Other implementation details:


6. Other (optional)
- Freely use this section to tell us about things that are related to the project 4, but not related to the other sections (optional)
